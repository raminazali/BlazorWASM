@using BlazorWASM.Components
@using BlazorWASM.Layout.B2C
@using BlazorWASM.Components.Panel
@using BlazorWasm.Data.Services
@using BlazorWasm.Entities.Contaters.Contracts
@using BlazorWasm.Entities.Contaters.Dtos
@using Blazored.Toast.Configuration
@layout SiteLayout
@page "/"
@inject IContactersService _contactersService
@inject IToastService ToastService;
@inject IToastService toastService
<!-- Header -->

<CustomerHeader />

<!-- Carsual Section -->
<section class="py-2">
    <div class="container-fluid  bg-light-subtle">
        <div class="d-flex align-items-stretch  text-dark shadow-lg">
            <div class="row  g-2 align-items-center  justify-content-center">

                <!-- Imaged Section -->
                <div class="col-lg-8 p-3 d-flex align-items-stretch">
                    <div class="d-flex flex-column w-100">
                        <h3>Hi i am <i class="text-warning">Developer</i></h3>
                        <p class="lead"> With this online tool, you can create text of a specific length and inner
                            composition. In the "Text Length" option, you can enter the exact number of characters and
                            the program will generate text of this length. The length value takes into account all
                            characters in the text – including letters, numbers, spaces, and any other symbols. In the
                            "Text Composition" option, you can specify the type of characters that should be included in
                            the generated text. You can choose from several popular options, such as "Lowercase Letters
                            (a-z)", "Uppercase Letters (A-Z)", "Mixed Letters (a-zA-Z)", "Numbers (0-9)", "Lowercase
                            Letters and Numbers", "Uppercase Letters and Numbers", "All Letters and Numbers", and
                            "Custom Symbols". If you select the last option, you can specify your own set of symbols and
                            characters for the text. You can list them in a multi-line field below. For example, you can
                            create text that's composed of 1000 emojis "😊" and "☹️". Textabulous!</p>
                    </div>
                </div>

                <!-- Image Section -->
                <div class="col-lg-4 d-flex ml-2 p-4 justify-content-sm-center">
                    <img src="photo_2024-09-07_18-21-06.jpg" alt="My Image"
                        class="img-fluid rounded-circle d-none d-md-block d-sm-block carousel-image">
                </div>
            </div>


        </div>
    </div>
</section>





<!-- Learn more -->

<section class="py-1">
    <div class="container">
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-4">
            <!-- Card 1 -->
            <div class="col">
                <div class="card h-100">
                    <img src="photo_2024-09-07_18-21-06.jpg" class="card-img-top img-fluid rounded" alt="...">
                    <div class="card-body">
                        <p class="card-text">Some quick example text to build on the card title and make up the bulk of
                            the
                            card's content.</p>
                    </div>
                </div>
            </div>
            <!-- Card 2 -->
            <div class="col">
                <div class="card h-100">
                    <img src="photo_2024-09-07_18-21-06.jpg" class="card-img-top img-fluid rounded" alt="...">
                    <div class="card-body">
                        <p class="card-text">Some quick example text to build on the card title and make up the bulk of
                            the
                            using BlazorWasm.Entities.Contaters.Dtos;
                            card's content.</p>
                    </div>
                </div>
            </div>
            <!-- Card 3 -->
            <div class="col">
                <div class="card h-100">
                    <img src="photo_2024-09-07_18-21-06.jpg" class="card-img-top img-fluid rounded" alt="...">
                    <div class="card-body">
                        <p class="card-text">Some quick example text to build on the card title and make up the bulk of
                            the
                            card's content.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<!-- footer Section -->

<footer class="bg-dark text-white py-4 mt-5">
    <div class="container">
        <div class="row">
            <!-- Footer Content -->

            <div class="col-3">
            </div>
            <!-- Contact Form -->
            <div class="col-lg-6 col-xl-6 col-12">
                <h4 class="text-warning h2">Contact Me</h4>
                <p>Feel free to reach out tool me</p>

                <form Model="@model" @onsubmit="SendEmail">
                    <!-- Full Name -->
                    <div class="mb-3">
                        <label for="fullName" class="form-label">Full Name</label>
                        <input type="text" @bind-value="@model.FullName" class="form-control" id="fullName"
                            placeholder="Enter your full name" required>
                    </div>

                    <!-- Subject -->
                    <div class="mb-3">
                        <label for="subject" class="form-label">Subject</label>
                        <input type="text" @bind-value="@model.Subject" class="form-control" id="subject"
                            placeholder="Enter subject" required>
                    </div>

                    <!-- Email -->
                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <input type="email" @bind-value="@model.Email" class="form-control" id="email"
                            placeholder="Enter your email" required>
                    </div>

                    <div class="mb-3">
                        <label for="description" class="form-label">description</label>
                        <input type="text" @bind-value="@model.Description" class="form-control" id="description"
                            placeholder="Enter your description" />
                    </div>

                    <!-- Submit Button -->
                    <div class="d-grid">
                        <button type="submit" class="btn btn-warning">Send Message</button>
                    </div>

                </form>
            </div>

            <div class="col-3"></div>

        </div>
    </div>
</footer>
<BlazoredToasts />


@code {

    public CreateContacterDto model { get; set; } = new();
    private async Task SendEmail(EventArgs e)
    {
        var result = await _contactersService.Create(model);
        result = false;
        if (!result)
        {
            toastService.ShowToast(ToastLevel.Error, "Contact creation Error!", opt =>
            {
                opt.Position = ToastPosition.BottomLeft;
                opt.ShowCloseButton = true;
                opt.PauseProgressOnHover = true;
            });
        }
    }
}